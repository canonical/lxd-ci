#!/bin/sh
set -eu

parentNIC="${1:-"enp5s0"}"

waitSnapdSeed() (
  set +x
  for i in $(seq 60); do # Wait up to 60s.
    if systemctl show snapd.seeded.service --value --property SubState | grep -qx exited; then
      return 0 # Success.
    fi

    sleep 1
  done

  echo "snapd not seeded after ${i}s"
  return 1 # Failed.
)

waitVMAgent() (
  set +x
  # shellcheck disable=SC3043
  local vmName="$1"
  for i in $(seq 90) # Wait up to 90s.
  do
    if lxc info "${vmName}" | grep -qF 127.0.0.1; then
      return 0 # Success.
    fi

    sleep 1
  done

  echo "VM ${vmName} agent not running after ${i}s"
  return 1 # Failed.
)

cleanup() {
    echo ""
    if [ "${FAIL}" = "1" ]; then
        echo "Test failed"
        exit 1
    fi

    echo "Test passed"
    exit 0
}

FAIL=1
trap cleanup EXIT HUP INT TERM

# Wait for snapd seeding
waitSnapdSeed

# Install LXD
while [ -e /usr/bin/lxd ]; do
    apt-get remove --purge --yes lxd lxd-client lxcfs liblxc1
done
apt-get remove --purge cloud-init --yes
snap remove lxd || true
snap install lxd --channel=latest/edge
apt-get install --no-install-recommends --yes jq
lxd waitready --timeout=300

# Enable SR-IOV on nic and bring up
echo 7 > "/sys/class/net/${parentNIC}/device/sriov_numvfs"
ip link set "${parentNIC}" up
sleep 10
ethtool "${parentNIC}"
ip a

# Configure LXD
lxc storage create default zfs
lxc profile device add default root disk path=/ pool=default

(
cat << EOF
version: 2
ethernets:
  eth0:
    optional: true
    accept-ra: true
    dhcp4: true
    dhcp6: true
  enp5s0:
    optional: true
    accept-ra: true
    dhcp4: true
    dhcp6: true
EOF
) | lxc profile set default user.network-config -

# Launch instances with physical NICs
echo "==> VM on default VLAN with physical"
lxc init images:ubuntu/22.04/cloud v1-physical --vm -c limits.cpu=3
lxc config device add v1-physical eth0 nic nictype=physical parent="${parentNIC}v1" name=eth0
lxc start v1-physical

echo "==> Container on default VLAN with physical"
lxc init images:ubuntu/22.04/cloud c1-physical
lxc config device add c1-physical eth0 nic nictype=physical parent="${parentNIC}v2" name=eth0
lxc start c1-physical

# Launch instances with macvlan NICs
echo "==> VM on default VLAN with macvlan"
lxc init images:ubuntu/22.04/cloud v1-macvlan --vm -c limits.cpu=3
lxc config device add v1-macvlan eth0 nic nictype=macvlan parent="${parentNIC}" name=eth0
lxc start v1-macvlan

echo "==> Container on default VLAN with macvlan"
lxc init images:ubuntu/22.04/cloud c1-macvlan
lxc config device add c1-macvlan eth0 nic nictype=macvlan parent="${parentNIC}" name=eth0
lxc start c1-macvlan

# Launch instances with sriov NICs
echo "==> VM on default VLAN with sriov"
lxc init images:ubuntu/22.04/cloud v1-sriov --vm -c limits.cpu=3
lxc config device add v1-sriov eth0 nic nictype=sriov parent="${parentNIC}" name=eth0
lxc start v1-sriov

echo "==> Container on default VLAN with sriov"
lxc init images:ubuntu/22.04/cloud c1-sriov
lxc config device add c1-sriov eth0 nic nictype=sriov parent="${parentNIC}" name=eth0
lxc start c1-sriov

# Wait for VMs to start.
echo "==> Waiting for VMs to start"
sleep 30
waitVMAgent v1-physical
waitVMAgent v1-macvlan
waitVMAgent v1-sriov

# Check that all instances have an IPv4 and IPv6 address
networkTests() {
    # shellcheck disable=SC3043
    local FAIL=0

    echo "=> Performing network tests"
    for url in $(lxc query "/1.0/instances" | jq -r .[]); do
        name=$(echo "${url}" | cut -d/ -f4)
        echo ""

        # Get the addresses
        address=$(lxc query "${url}/state" | jq -r ".network.eth0.addresses | .[] | select(.scope | contains(\"global\")) | .address" 2>/dev/null || true)
        if [ -z "${address}" ]; then
            address=$(lxc query "${url}/state" | jq -r ".network.enp5s0.addresses | .[] | select(.scope | contains(\"global\")) | .address" 2>/dev/null || true)
        fi

        if [ -z "${address}" ]; then
            echo "FAIL: No network interface address: ${name}"
            FAIL=1
            continue
        fi

        # IPv4 address
        if echo "${address}" | grep -qF "."; then
            echo "PASS: IPv4 address: ${name}"
        else
            echo "FAIL: IPv4 address: ${name}"
            FAIL=1
        fi

        # IPv6 address
        if echo "${address}" | grep -qF ":"; then
            echo "PASS: IPv6 address: ${name}"
        else
            echo "FAIL: IPv6 address: ${name}"
            FAIL=1
        fi

        # DNS resolution
        if lxc exec "${name}" -- getent hosts linuxcontainers.org >/dev/null 2>&1 || lxc exec "${name}" -- ping -c1 -W1 linuxcontainers.org >/dev/null 2>&1; then
            echo "PASS: DNS resolution: ${name}"
        else
            echo "FAIL: DNS resolution: ${name}"
            FAIL=1
        fi
    done

    if [ "${FAIL}" = "1" ]; then
        return 1
    fi

    return 0
}

lxc list
networkTests

# Reload LXD and check connectivity still works.
# Ensures VM NICs are not dependent on any fds/fdsets from LXD.
systemctl reload snap.lxd.daemon
sleep 10
lxd waitready --timeout=300
networkTests

# Check VM macvlan multi-queue support.
lxc exec v1-macvlan -- apt-get install --no-install-recommends --yes ethtool
lxc exec v1-macvlan -- ethtool -l enp5s0 | grep -c '^Combined:\s\+3$'  | grep -Fx 2

# Hot unplug the NICs and check they are removed
lxc config device remove v1-physical eth0
! lxc exec v1-physical -- ip a show enp5s0 || false
lxc config device remove c1-physical eth0
! lxc exec c1-physical -- ip a show eth0 || false
lxc config device remove v1-macvlan eth0
! lxc exec v1-macvlan -- ip a show enp5s0 || false
lxc config device remove c1-macvlan eth0
! lxc exec c1-macvlan -- ip a show eth0 || false
lxc config device remove v1-sriov eth0
! lxc exec v1-sriov -- ip a show enp5s0 || false
lxc config device remove c1-sriov eth0
! lxc exec c1-sriov -- ip a show eth0 || false

lxc list

# Hot plug the NICs back
lxc config device add v1-physical eth0 nic nictype=physical parent="${parentNIC}v1" name=eth0
lxc config device add c1-physical eth0 nic nictype=physical parent="${parentNIC}v2" name=eth0
lxc config device add v1-macvlan eth0 nic nictype=macvlan parent="${parentNIC}" name=eth0
lxc config device add c1-macvlan eth0 nic nictype=macvlan parent="${parentNIC}" name=eth0
lxc config device add v1-sriov eth0 nic nictype=sriov parent="${parentNIC}" name=eth0
lxc config device add c1-sriov eth0 nic nictype=sriov parent="${parentNIC}" name=eth0

# Wait for DHCP
sleep 10

# Check the IPs are re-added
lxc list
networkTests

# Remove instances, leaving one VM and container for bridge hotplug test
lxc delete -f v1-macvlan
lxc delete -f c1-macvlan
lxc delete -f v1-sriov
lxc delete -f c1-sriov

# Check bridged NIC type works (also test hotlugging different NIC type).
echo "=> Performing bridged NIC tests"
lxc network create lxdbr0
lxc config device remove v1-physical eth0
lxc config device remove c1-physical eth0
lxc config device add v1-physical eth0 nic network=lxdbr0 name=eth0
lxc config device add c1-physical eth0 nic network=lxdbr0 name=eth0

# Wait for DHCP
sleep 10

# Check the IPs are re-added
lxc list
networkTests

# Check VM "agent.nic_config" works by reconfiguring eth0 to use parent and mtu settings.
echo "=> Performing VM bridged NIC agent.nic_config tests"
lxc stop v1-physical -f
lxc config set v1-physical agent.nic_config=true
lxc config device set v1-physical eth0 nictype=bridged parent=lxdbr0 network= mtu=1400 name=eth0
lxc start v1-physical

# Wait for lxd-agent to rename the interface.
waitVMAgent v1-physical

# Interface "eth0" should exist in the VM with the correct MTU.
lxc exec v1-physical -- test -d /sys/class/net/eth0
lxc exec v1-physical -- grep -Fx 1400 /sys/class/net/eth0/mtu

# Check VM bridged multi-queue support.
lxc exec v1-physical -- apt-get install --no-install-recommends --yes ethtool
lxc exec v1-physical -- ethtool -l eth0 | grep -c '^Combined:\s\+3$'  | grep -Fx 2

# Default VM interface enp5s0 should not exist in the VM.
! lxc exec v1-physical -- test -d /sys/class/net/enp5s0 || false

# Cleanup
echo "=> Cleanup"
for url in $(lxc query "/1.0/instances" | jq -r .[]); do
    name=$(echo "${url}" | cut -d/ -f4)
    lxc delete -f "${name}"
done

lxc profile device remove default root
lxc storage delete default
lxc network delete lxdbr0

FAIL=0
