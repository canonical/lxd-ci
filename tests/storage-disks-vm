#!/bin/sh
set -eux

waitSnapdSeed() (
  set +x
  for i in $(seq 60); do # Wait up to 60s.
    if systemctl show snapd.seeded.service --value --property SubState | grep -qx exited; then
      return 0 # Success.
    fi

    sleep 1
  done

  echo "snapd not seeded after ${i}s"
  return 1 # Failed.
)

cleanup() {
    echo ""
    if [ "${FAIL}" = "1" ]; then
        echo "Test failed"
        exit 1
    fi

    echo "Test passed"
    exit 0
}

FAIL=1
trap cleanup EXIT HUP INT TERM

# Wait for snapd seeding
waitSnapdSeed

# Install LXD
snap remove lxd || true
snap install lxd --channel=latest/edge
lxd waitready --timeout=300

waitVMAgent() (
  set +x
  # shellcheck disable=SC3043
  local vmName="$1"
  for i in $(seq 90) # Wait up to 90s.
  do
    if lxc info "${vmName}" | grep -qF 127.0.0.1; then
      return 0 # Success.
    fi

    sleep 1
  done

  echo "VM ${vmName} agent not running after ${i}s"
  return 1 # Failed.
)

echo "==> Setup share directory"
# Create directory for use as basis for restricted disk source tests.
testRoot="/opt/lxd-test-restricted"
mkdir "${testRoot}"

# Create directory for use as allowed disk source path prefix in project.
mkdir "${testRoot}/allowed1"
mkdir "${testRoot}/allowed2"
mkdir "${testRoot}/allowed1/foo1"
mkdir "${testRoot}/allowed1/foo2"
chown 1000:1000 "${testRoot}/allowed1/foo1"
chown 1001:1001 "${testRoot}/allowed1/foo2"
mkdir "${testRoot}/not-allowed1"
ln -s "${testRoot}/not-allowed1" "${testRoot}/allowed1/not-allowed1"
ln -s "${testRoot}/allowed2" "${testRoot}/allowed1/not-allowed2"
(cd "${testRoot}/allowed1" || false; ln -s foo1 foolink)

# Configure LXD
lxc project switch default
lxc network create lxdbr0
lxc storage create default zfs size=20GB volume.size=5GB

# Create project with restricted disk source path.
lxc project create restricted \
  -c features.images=false \
  -c restricted=true \
  -c restricted.devices.disk=allow \
  -c restricted.devices.disk.paths="${testRoot}/allowed1,${testRoot}/allowed2"
  lxc project switch restricted
lxc project switch restricted
lxc profile device add default root disk path="/" pool=default
lxc profile device add default eth0 nic network=lxdbr0
lxc profile show default

# Create instance and add check relative source paths are not allowed.
lxc init ubuntu:20.04 v1 --vm
! lxc config device add v1 d1 disk source=foo path=/mnt || false

# Check adding a disk with a source path above the restricted parent source path isn't allowed.
! lxc config device add v1 d1 disk source="${testRoot}/not-allowed1" path=/mnt || false

# Check adding a disk with a source path that is a symlink above the restricted parent source path isn't allowed
# at start time (check that openat2 restrictions are doing their job).
lxc config device add v1 d1 disk source="${testRoot}/allowed1/not-allowed1" path=/mnt
! lxc start v1 || false

# Check some rudimentary work arounds to allowed path checks don't work.
! lxc config device set v1 d1 source="${testRoot}/../not-allowed1" || false

# Check adding a disk from a restricted source path cannot use shifting at start time. This is not safe as we
# cannot prevent creation of files with setuid, which would allow a root executable to be created.
lxc config device set v1 d1 source="${testRoot}/allowed1" shift=true
! lxc start v1 || false

# Check adding a disk with a source path that is allowed is allowed.
lxc config device set v1 d1 source="${testRoot}/allowed1" shift=false
lxc start v1
waitVMAgent v1
lxc exec v1 --project restricted -- ls /mnt/foo1
lxc stop -f v1

# Check adding a disk with a source path that is allowed that symlinks to another allowed source path isn't
# allowed at start time.
lxc config device set v1 d1 source="${testRoot}/allowed1/not-allowed2"
! lxc start v1 || false

# Check relative symlink inside allowed parent path is allowed.
lxc config device set v1 d1 source="${testRoot}/allowed1/foolink" path=/mnt/foolink
lxc start v1
waitVMAgent v1
[ "$(lxc exec v1 --project restricted  -- stat /mnt/foolink -c '%u:%g')" = "65534:65534" ] || false
lxc stop -f v1

# Check usage of raw.idmap is restricted.
! lxc config set v1 raw.idmap="both 1000 1000" || false

# Allow specific raw.idmap host UID/GID.
lxc project set restricted restricted.idmap.uid=1000
! lxc config set v1 raw.idmap="both 1000 1000" || false
! lxc config set v1 raw.idmap="gid 1000 1000" || false
lxc config set v1 raw.idmap="uid 1000 1000"

lxc project set restricted restricted.idmap.gid=1000
lxc config set v1 raw.idmap="gid 1000 1000"
lxc config set v1 raw.idmap="both 1000 1000"

# Check conflict detection works.
! lxc project unset restricted restricted.idmap.uid || false
! lxc project unset restricted restricted.idmap.gid || false

# Check single entry raw.idmap has taken effect on disk share.
lxc config device set v1 d1 source="${testRoot}/allowed1" path=/mnt
lxc start v1 || (lxc info --show-log c1 ; false)
waitVMAgent v1
[ "$(lxc exec v1 --project restricted  -- stat /mnt/foo1 -c '%u:%g')" = "1000:1000" ] || false
[ "$(lxc exec v1 --project restricted  -- stat /mnt/foo2 -c '%u:%g')" = "65534:65534" ] || false

# Check security.secureboot setting is applied to running VM at next start up.
lxc exec v1 -- mokutil --sb-state | grep -Fx "SecureBoot enabled"
lxc profile set default security.secureboot=false
lxc restart -f v1
waitVMAgent v1
lxc exec v1 -- mokutil --sb-state | grep -Fx "SecureBoot disabled"

echo "==> Cleanup"
lxc delete -f v1
lxc project switch default
lxc project delete restricted
lxc storage delete default
lxc network delete lxdbr0

rm "${testRoot}/allowed1/not-allowed1"
rm "${testRoot}/allowed1/not-allowed2"
rmdir "${testRoot}/allowed1/foo1"
rmdir "${testRoot}/allowed1/foo2"
rm "${testRoot}/allowed1/foolink"
rmdir "${testRoot}/allowed1"
rmdir "${testRoot}/allowed2"
rmdir "${testRoot}/not-allowed1"
rmdir "${testRoot}"

FAIL=0
