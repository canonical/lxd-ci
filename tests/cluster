#!/bin/sh
set -eux

# Install LXD
#install_lxd

# Configure LXD
#lxd init --auto

PREFIX="cluster-$$"
SIZE="$1"

if [ -z "${1:-""}" ] || [ -z "${2:-""}" ] || [ -z "${3:-""}" ]; then
    echo "Usage: ${0} <count> <source channel> <destination channel>"
    exit 1
fi

echo "==> Deploying the cluster"

print_log() {
    echo "==> Start log file ${1}"
    log_file="${1}.log"
    lxc file pull "${1}/var/snap/lxd/common/lxd/logs/lxd.log" "${log_file}" || true
    cat "${log_file}" || true
    echo "<== End log file ${1}"
    rm -f "${log_file}"
}

# Launch the container
lxc launch "${TEST_IMG:-ubuntu-daily:22.04}" "${PREFIX}-1" -c security.nesting=true -c security.devlxd.images=true

waitInstanceBooted "${PREFIX}-1"

lxc exec "${PREFIX}-1" -- snap refresh lxd --channel="$2"

for i in $(seq 2 "${SIZE}"); do
    lxc copy "${PREFIX}-1" "${PREFIX}-$i"
    lxc start "${PREFIX}-$i"
    waitInstanceBooted "${PREFIX}-$i"
done

for i in $(seq "${SIZE}"); do
    sleep 10

    # Configure the cluster
    if [ "$i" = "1" ]; then
        CLUSTER_IP=$(lxc exec "${PREFIX}-$i" -- ip -4 addr show dev eth0 scope global | grep inet | cut -d' ' -f6 | cut -d/ -f1)
        lxc exec "${PREFIX}-$i" -- lxc config set core.https_address "${CLUSTER_IP}:8443"
        lxc exec "${PREFIX}-$i" -- lxc config set cluster.https_address "${CLUSTER_IP}:8443"
        lxc exec "${PREFIX}-$i" -- lxc cluster enable "${PREFIX}-$i"
        lxc exec "${PREFIX}-$i" -- lxc network create lxdfan0 bridge.mode=fan
        lxc exec "${PREFIX}-$i" -- lxc storage create default dir
        lxc exec "${PREFIX}-$i" -- lxc profile device add default root disk path=/ pool=default
        lxc exec "${PREFIX}-$i" -- lxc profile device add default eth0 nic name=eth0 network=lxdfan0
        lxc exec "${PREFIX}-$i" -- lxc network show lxdfan0
        CLUSTER_CRT=$(lxc file pull "${PREFIX}-$i"/var/snap/lxd/common/lxd/cluster.crt - | sed ':a;N;$!ba;s/\n/\n\n/g')
    else
        MEMBER_IP=$(lxc exec "${PREFIX}-$i" -- ip -4 addr show dev eth0 scope global | grep inet | cut -d' ' -f6 | cut -d/ -f1)

        # Get a join token
        TOKEN="$(lxc exec "${PREFIX}-1" -- lxc cluster add --quiet "${PREFIX}-${i}")"

        lxc exec "${PREFIX}-$i" -- lxd init --preseed << EOF
cluster:
  server_name: "${PREFIX}-$i"
  enabled: true
  member_config: []
  cluster_address: ${CLUSTER_IP}:8443
  cluster_certificate: "${CLUSTER_CRT}"
  server_address: ${MEMBER_IP}:8443
  cluster_token: "${TOKEN}"
EOF
    fi
done

echo "==> Validating the cluster"
lxc exec "${PREFIX}-1" -- lxc info
lxc exec "${PREFIX}-1" -- lxc cluster list

# Test fan networking (intra fan from container and host, as well as external NAT comms)
echo "==> Test fan networking"
lxc exec "${PREFIX}-1" -- lxc launch "${TEST_IMG:-ubuntu-daily:22.04}" u1
lxc exec "${PREFIX}-1" -- lxc launch "${TEST_IMG:-ubuntu-daily:22.04}" u2

echo "==> Wait for addresses"
sleep 10
lxc exec "${PREFIX}-1" -- lxc list

U2_IPV4="$(lxc exec "${PREFIX}-1" -- lxc list u2 -c4 --format=csv | cut -d' ' -f1)"
lxc exec "${PREFIX}-1" -- lxc exec u1 -- ping -c1 "${U2_IPV4}"
lxc exec "${PREFIX}-1" -- ping -c1 "${U2_IPV4}"

tmp_cert_dir="$(mktemp -d)"

echo "==> Add restricted and unrestricted certificates"
createCertificateAndKey "${tmp_cert_dir}/cert.key" "${tmp_cert_dir}/cert.crt" "cert.local"
createCertificateAndKey "${tmp_cert_dir}/cert-restricted.key" "${tmp_cert_dir}/cert-restricted.crt" "cert-restricted.local"
lxc config trust add "${tmp_cert_dir}/cert.crt"
lxc config trust add "${tmp_cert_dir}/cert-restricted.crt" --restricted --projects default
unrestricted_fingerprint="$(openssl x509 -in "${tmp_cert_dir}/cert.crt" -outform der | sha256sum | head -c12)"
restricted_fingerprint="$(openssl x509 -in "${tmp_cert_dir}/cert-restricted.crt" -outform der | sha256sum | head -c12)"

echo "==> Check the certificates for its permissions"
lxc query "/1.0/certificates/${unrestricted_fingerprint}" | jq -r ".restricted" | grep -xF false
lxc query "/1.0/certificates/${unrestricted_fingerprint}" | jq -r ".type" | grep -xF client
lxc query "/1.0/certificates/${restricted_fingerprint}" | jq -r ".restricted" | grep -xF true
lxc query "/1.0/certificates/${restricted_fingerprint}" | jq -r ".type" | grep -xF client
lxc query "/1.0/certificates/${restricted_fingerprint}" | jq -r ".projects[0]" | grep -xF default

echo "==> Add restricted and unrestricted metrics certificates"
createCertificateAndKey "${tmp_cert_dir}/metrics.key" "${tmp_cert_dir}/metrics.crt" "metrics.local"
createCertificateAndKey "${tmp_cert_dir}/metrics-restricted.key" "${tmp_cert_dir}/metrics-restricted.crt" "metrics-restricted.local"
lxc config trust add "${tmp_cert_dir}/metrics.crt" --type metrics
lxc config trust add "${tmp_cert_dir}/metrics-restricted.crt" --type metrics --restricted --projects default
unrestricted_metrics_fingerprint="$(openssl x509 -in "${tmp_cert_dir}/metrics.crt" -outform der | sha256sum | head -c12)"
restricted_metrics_fingerprint="$(openssl x509 -in "${tmp_cert_dir}/metrics-restricted.crt" -outform der | sha256sum | head -c12)"

echo "==> Check the metrics certificates for its permissions"
lxc query "/1.0/certificates/${unrestricted_metrics_fingerprint}" | jq -r ".restricted" | grep -xF false
lxc query "/1.0/certificates/${unrestricted_metrics_fingerprint}" | jq -r ".type" | grep -xF metrics
lxc query "/1.0/certificates/${restricted_metrics_fingerprint}" | jq -r ".restricted" | grep -xF true
lxc query "/1.0/certificates/${restricted_metrics_fingerprint}" | jq -r ".type" | grep -xF metrics
lxc query "/1.0/certificates/${restricted_metrics_fingerprint}" | jq -r ".projects[0]" | grep -xF default

echo "==> Upgrading the cluster"
for i in $(seq "${SIZE}"); do
    lxc exec "${PREFIX}-$i" -- snap refresh
    lxc exec "${PREFIX}-$i" -- snap switch lxd --channel="$3"
    if [ "$i" = "${SIZE}" ]; then
        lxc exec "${PREFIX}-$i" -- snap wait system seed.loaded
        lxc exec "${PREFIX}-$i" -- timeout 10m snap refresh lxd
    fi
done

echo "==> Wait for all members to be ONLINE"
for _ in $(seq 10); do
    sleep 30
    ONLINE_MEMBERS="$(lxc exec "${PREFIX}-1" -- lxc cluster list | grep -cwF ONLINE)"
    [ "${ONLINE_MEMBERS}" = "${SIZE}" ] && break
done
sleep 10

echo "==> Validating the cluster"
lxc exec "${PREFIX}-1" -- lxc info
lxc exec "${PREFIX}-1" -- lxc cluster list

echo "==> Check the certificates for its permissions after cluster upgrade"
lxc query "/1.0/certificates/${unrestricted_fingerprint}" | jq -r ".restricted" | grep -xF false
lxc query "/1.0/certificates/${unrestricted_fingerprint}" | jq -r ".type" | grep -xF client
lxc query "/1.0/certificates/${restricted_fingerprint}" | jq -r ".restricted" | grep -xF true
lxc query "/1.0/certificates/${restricted_fingerprint}" | jq -r ".type" | grep -xF client
lxc query "/1.0/certificates/${restricted_fingerprint}" | jq -r ".projects[0]" | grep -xF default

echo "==> Check the metrics certificates for its permissions after cluster upgrade"
lxc query "/1.0/certificates/${unrestricted_metrics_fingerprint}" | jq -r ".restricted" | grep -xF false
lxc query "/1.0/certificates/${unrestricted_metrics_fingerprint}" | jq -r ".type" | grep -xF metrics
lxc query "/1.0/certificates/${restricted_metrics_fingerprint}" | jq -r ".restricted" | grep -xF true
lxc query "/1.0/certificates/${restricted_metrics_fingerprint}" | jq -r ".type" | grep -xF metrics
lxc query "/1.0/certificates/${restricted_metrics_fingerprint}" | jq -r ".projects[0]" | grep -xF default

echo "==> Deleting the cluster"
for i in $(seq "${SIZE}"); do
    print_log "${PREFIX}-$i"
    lxc delete --force "${PREFIX}-$i"
done

rm -rf "${tmp_cert_dir}"

# shellcheck disable=SC2034
FAIL=0
