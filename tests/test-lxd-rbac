#!/bin/sh
set -eu

waitSnapdSeed() (
  set +x
  for i in $(seq 60); do # Wait up to 60s.
    if systemctl show snapd.seeded.service --value --property SubState | grep -qx exited; then
      return 0 # Success.
    fi

    sleep 1
  done

  echo "snapd not seeded after ${i}s"
  return 1 # Failed.
)

cleanup() {
    echo ""
    if [ "${FAIL}" = "1" ]; then
        echo "Test failed"
        exit 1
    fi

    echo "Test passed"
    exit 0
}

FAIL=1
trap cleanup EXIT HUP INT TERM

# Wait for snapd seeding
waitSnapdSeed

# Install LXD
while [ -e /usr/bin/lxd ]; do
    apt-get remove --purge --yes lxd lxd-client lxcfs liblxc1
done
apt-get remove --purge cloud-init --yes
snap remove lxd || true
snap install lxd --channel=latest/edge
apt-get install --no-install-recommends --yes jq
snap install bhttp
lxd waitready --timeout=300

# Configure LXD
lxc storage create default zfs
lxc profile device add default root disk path=/ pool=default
lxc network create lxdbr0
lxc profile device add default eth0 nic network=lxdbr0 name=eth0

# Configure RBAC
curl https://canonical-lxd.monstermunchkin.dev/config/rbac-test.service -o rbac-test.service
lxc config set rbac.agent.private_key "$(jq -r .key.private < rbac-test.service)"
lxc config set rbac.agent.public_key "$(jq -r .key.public < rbac-test.service)"
lxc config set rbac.agent.url "$(jq -r .agents[0].url < rbac-test.service)"
lxc config set rbac.agent.username "$(jq -r .agents[0].username < rbac-test.service)"
lxc config set rbac.api.key 4BG3ukH0XFbskFH15Se11C4K0ENBiO4fxc917R0yJRo
lxc config set rbac.api.url https://services.monstermunchkin.dev/rbac
lxc config set core.https_address :8443

# Setup remote
(
cat << EOF
default-remote: local
remotes:
  images:
    addr: https://images.linuxcontainers.org
    protocol: simplestreams
    public: true
  local:
    addr: unix://
    public: false
  rbac-user:
    addr: https://127.0.0.1:8443
    protocol: lxd
    auth_type: candid
    protocol: lxd
    public: false
  rbac-admin:
    addr: https://127.0.0.1:8443
    protocol: lxd
    auth_type: candid
    protocol: lxd
    public: false
aliases: {}
EOF
) > ~/snap/lxd/common/config/config.yml
mkdir -p ~/snap/lxd/common/config/jars/

mkdir -p ~/snap/lxd/common/config/servercerts/
cp /var/snap/lxd/common/lxd/server.crt ~/snap/lxd/common/config/servercerts/rbac-user.crt
cp /var/snap/lxd/common/lxd/server.crt ~/snap/lxd/common/config/servercerts/rbac-admin.crt

# Get user credentials
curl https://canonical-lxd.monstermunchkin.dev/config/rbac-test.user -o /var/snap/bhttp/common/rbac-test.user
bhttp --cookiefile /var/snap/bhttp/common/rbac-user --agent /var/snap/bhttp/common/rbac-test.user https://services.monstermunchkin.dev/rbac/api/rbac/v1/service/registerable || true
cp /var/snap/bhttp/common/rbac-user ~/snap/lxd/common/config/jars/rbac-user

# Get admin credentials
curl https://canonical-lxd.monstermunchkin.dev/config/rbac-test.admin -o /var/snap/bhttp/common/rbac-test.admin
bhttp --cookiefile /var/snap/bhttp/common/rbac-admin --agent /var/snap/bhttp/common/rbac-test.admin https://services.monstermunchkin.dev/rbac/api/rbac/v1/service/registerable || true
cp /var/snap/bhttp/common/rbac-admin ~/snap/lxd/common/config/jars/rbac-admin

# Validate access
echo "==> Confirming basic API access"
lxc info rbac-user:
lxc info rbac-admin:

# Confirm initial access
echo "==> Attempting to list instances as rbac-admin"
lxc list rbac-admin:

echo "==> Attempting to list instances as rbac-user"
! lxc list rbac-user: || false

# Create some test projects
echo "==> Creating some test projects"
lxc project create test-admin -c features.profiles=false
lxc project create test-operator -c features.profiles=false
lxc project create test-user -c features.profiles=false
lxc project create test-auditor -c features.profiles=false

# Create containers in all projects
echo "==> Creating some instances in those projects"
lxc launch images:alpine/edge a1 --project test-admin
lxc launch images:alpine/edge a2 --project test-operator
lxc launch images:alpine/edge a3 --project test-user
lxc launch images:alpine/edge a4 --project test-auditor

echo "==> Configuring rbac-user for access to projects"
bhttp --raw --agent /var/snap/bhttp/common/rbac-test.admin https://services.monstermunchkin.dev/rbac/api/rbac/v1/resource > resources.json
bhttp --raw --agent /var/snap/bhttp/common/rbac-test.admin https://services.monstermunchkin.dev/rbac/api/rbac/v1/user > user.json
i=1
USER_REF="$(jq -r '.[] | select(.name=="user") | .["$uri"]' < user.json)"
for role in admin operator user auditor; do
    RESOURCE_REF="$(jq -r ".[] | select(.name==\"test-${role}\") | .\"\$uri\"" < resources.json)"
    ROLE_REF="/api/rbac/v1/role/${i}"

    echo "{\"resource\":{\"\$ref\":\"${RESOURCE_REF}\"},\"role\":{\"\$ref\":\"${ROLE_REF}\"},\"user\":{\"\$ref\":\"${USER_REF}\"}}" | bhttp post --agent /var/snap/bhttp/common/rbac-test.admin https://services.monstermunchkin.dev/rbac/api/rbac/v1/policy --raw --stdin --json

    i=$((i+1))
done
echo ""

# Give a tiny bit of time for RBAC to send its notifications...
echo "==> Waiting for RBAC notification"
sleep 2m

# Switch to RBAC remote
lxc remote switch rbac-user

# Validate basic access
echo "==> Validate basic read access"
! lxc list rbac-user: || false
lxc list rbac-user: --project test-admin
lxc list rbac-user: --project test-operator
lxc list rbac-user: --project test-user
lxc list rbac-user: --project test-auditor

# Validate exec permissions
echo "==> Validate exec permissions"
lxc exec a1 true --project test-admin
lxc exec a2 true --project test-operator
lxc exec a3 true --project test-user
#! lxc exec a4 true --project test-auditor || false

# Validate snapshot permissions
echo "==> Validate snapshot permissions"
lxc snapshot a1 --project test-admin
lxc snapshot a2 --project test-operator
lxc snapshot a3 --project test-user
! lxc snapshot a4 --project test-auditor || false

# Validate create permissions
echo "==> Validate create permissions"
lxc launch images:alpine/edge a5 --project test-admin
lxc launch images:alpine/edge a6 --project test-operator
! lxc launch images:alpine/edge a7 --project test-user || false
! lxc launch images:alpine/edge a8 --project test-auditor || false

# Validate project permissions
echo "==> Validate project permissions"
lxc project set test-admin limits.containers 10
! lxc project set test-operator limits.containers 10 || false
! lxc project set test-user limits.containers 10 || false
! lxc project set test-auditor limits.containers 10 || false

FAIL=0
