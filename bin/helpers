# shellcheck disable=SC2148

# waitSnapdSeed: wait for snapd to be seeded.
waitSnapdSeed() (
  set +x
  if timeout 60 snap wait system seed.loaded; then
    return 0 # Success.
  fi
  echo "snapd not seeded after 60s"
  return 1 # Failed.
)

# waitInstanceReady: waits for the instance to be ready (processes count > 1).
waitInstanceReady() (
  set +x
  maxWait=90
  instName="${1}"
  instProj="${2:-}"
  if [ -z "${instProj}" ]; then
    # Find the currently selected project.
    instProj="$(lxc project list -f csv | sed -n 's/^\([^(]\+\) (current),.*/\1/ p')"
  fi

  # Wait for the instance to report more than one process.
  processes=0
  for _ in $(seq "${maxWait}"); do
      processes="$(lxc info --project "${instProj}" "${instName}" | awk '{if ($1 == "Processes:") print $2}')"
      if [ "${processes}" -gt 1 ]; then
          return 0 # Success.
      fi
      sleep 1
  done

  echo "Instance ${instName} (${instProj}) not ready after ${maxWait}s"
  return 1 # Failed.
)

# waitInstanceBooted: waits for the instance to be ready and fully booted.
waitInstanceBooted() (
  set +x
  maxWait=90
  instName="$1"
  instProj="${2:-}"
  if [ -z "${instProj}" ]; then
    # Find the currently selected project.
    instProj="$(lxc project list -f csv | sed -n 's/^\([^(]\+\) (current),.*/\1/ p')"
  fi

  # Wait for the instance to be ready
  waitInstanceReady "${instName}" "${instProj}"

  # Then wait for the boot sequence to complete.
  sleep 1
  state="$(lxc exec --project "${instProj}" "${instName}" -- timeout "${maxWait}" systemctl is-system-running --wait || true)"
  if [ "${state}" = "running" ]; then
    return 0 # Success.
  fi

  echo "Instance ${instName} (${instProj}) not booted after ${maxWait}s"
  lxc list --project "${instProj}" "${instName}"
  return 1 # Failed.
)

# enableSRIOV: enable SR-IOV on a NIC.
enableNICSRIOV() (
  set +x
  parentNIC="${1}"
  numVFS="${2:-"7"}"

  if ! [ -d "/sys/class/net/${parentNIC}" ]; then
      echo "${parentNIC} is not present, wrong name?"
      return 1
  fi

  if ! [ -e "/sys/class/net/${parentNIC}/device/sriov_numvfs" ]; then
      echo "${parentNIC} does not support SRIOV VFs"
      return 1
  fi

  echo "${numVFS}" > "/sys/class/net/${parentNIC}/device/sriov_numvfs"
  ip link set "${parentNIC}" up
  sleep 10
  ethtool "${parentNIC}"
)

# install_deps: install dependencies if needed.
install_deps() (
    set +x
    PKGS="${*}"
    missing=""
    PKGS_LIST="$(dpkg --get-selections | awk '{print $1}')"
    for pkg in ${PKGS}; do
        grep -qxF "${pkg}" <<< "${PKGS_LIST}" && continue
        missing="${missing} ${pkg}"
        break
    done

    if [ "${missing}" != "" ]; then
        apt-get update
        if [ "${INSTALL_RECOMMENDS:-"no"}" = "yes" ]; then
            apt-get install --yes ${PKGS}
        else
            apt-get install --no-install-recommends --yes ${PKGS}
        fi
    fi
)

# setupInstanceApt: prepare apt in the instance if needed.
setupInstanceApt() (
  set +x

  # Only needed if /etc/apt/apt-mirrors.txt is detected in the host
  [ -e /etc/apt/apt-mirrors.txt ] || return

  instName="$1"
  instProj="${2:-}"
  if [ -z "${instProj}" ]; then
    # Find the currently selected project.
    instProj="$(lxc project list -f csv | sed -n 's/^\([^(]\+\) (current),.*/\1/ p')"
  fi

  # Wait for the instance to be ready
  waitInstanceReady "${instName}" "${instProj}"

  DISTRO="$(lxc config get --project "${instProj}" "${instName}" image.release)"

  if [ "${DISTRO}" = "noble" ]; then
    echo "deb822 .sources not yet supported, aborting"
    exit 1
  else
    lxc file push --quiet --mode 0644 --uid 0 --gid 0 --project "${instProj}" /etc/apt/apt-mirrors.txt "${instName}/etc/apt/apt-mirrors.txt"
    lxc file push --quiet --mode 0644 --uid 0 --gid 0 --project "${instProj}" - "${instName}/etc/apt/sources.list" << EOF
deb [arch=amd64] mirror+file:/etc/apt/apt-mirrors.txt ${DISTRO} main universe
deb [arch=amd64] mirror+file:/etc/apt/apt-mirrors.txt ${DISTRO}-updates main universe
EOF
  fi
)

# install_lxd: install LXD from a specific channel or `latest/edge` if none is provided.
install_lxd() (
    # Wait for snapd seeding
    waitSnapdSeed

    # Prior to removal, snap takes a snapshot of the user data. This is
    # slow and IO intensive so best skipped if possible by a purge.
    if [ -n "${GITHUB_ACTIONS:-}" ] || [ -n "${PURGE_LXD:-}" ]; then
        snap remove --purge lxd || true
    else
        snap remove lxd || true
    fi

    snap install lxd --channel="${LXD_SNAP_CHANNEL}"
    snap list lxd
    uname -a
    cat /proc/cmdline
    lxd waitready --timeout=300

    # Silence the "If this is your first time running LXD on this machine" banner
    # on first invocation
    mkdir -p ~/snap/lxd/common/config/
    touch ~/snap/lxd/common/config/config.yml
)

# hasNeededAPIExtension: check if LXD supports the needed extension.
hasNeededAPIExtension() (
    needed_extension="${1}"

    lxc info | sed -ne '/^api_extensions:/,/^[^-]/ s/^- //p' | grep -qxF "${needed_extension}"
)

# runsMinimumKernel: check if the running kernel is at least the minimum version.
runsMinimumKernel() (
    min_version="${1}"
    min_major="$(echo "${min_version}" | cut -d. -f1)"
    min_minor="$(echo "${min_version}" | cut -d. -f2)"
    running_version="$(uname -r | cut -d. -f 1,2)"
    running_major="$(echo "${running_version}" | cut -d. -f1)"
    running_minor="$(echo "${running_version}" | cut -d. -f2)"

    if [ "${running_major}" -lt "${min_major}" ]; then
        return 1
    elif [ "${running_major}" -eq "${min_major}" ] && [ "${running_minor}" -lt "${min_minor}" ]; then
        return 1
    fi
    return 0
)

# cleanup: report if the test passed or not and return the appropriate return code.
cleanup() {
    set +e
    echo ""
    if [ "${FAIL}" = "1" ]; then
        echo "Test failed"
        exit 1
    fi

    # Run any extra cleanup function only on success
    if command -v extra_cleanup > /dev/null; then
      extra_cleanup || true
    fi

    echo "Test passed"
    exit 0
}

export DEBIAN_FRONTEND=noninteractive
FAIL=1
trap cleanup EXIT HUP INT TERM
