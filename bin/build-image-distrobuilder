#!/bin/sh -eu
export PATH="/snap/bin/:${PATH}"

cleanup() {
    set +e
    lxc delete build-distrobuilder-cache -f >/dev/null 2>&1

    exit 0
}
trap cleanup EXIT HUP INT TERM

ARCH="$1"
TARGET="$2"
DISTRO="jammy"

# Create the container
lxc init "images:ubuntu/${DISTRO}/${ARCH}" build-distrobuilder-cache \
    -c security.privileged=true -c security.nesting=true \
    -c raw.lxc="lxc.cgroup.devices.allow = b 259:* rw"

# Setup loop devices
(
    lxc config show build-distrobuilder-cache | sed "/devices:/d"
    cat << EOF
devices:
  loop-control:
    major: "10"
    minor: "237"
    path: /dev/loop-control
    type: unix-char
EOF

    for i in $(seq 0 64); do
        cat << EOF
  loop${i}:
    major: "7"
    minor: "${i}"
    path: /dev/loop${i}
    type: unix-block
EOF
    done
) | lxc config edit build-distrobuilder-cache

# Start the container
lxc start build-distrobuilder-cache

# Install distrobuilder
(
    cat << EOF
#!/bin/sh
set -eux

# Wait for network
while :; do
    ping -W1 -c1 linuxcontainers.org >/dev/null 2>&1 && break
    sleep 1
done

ARCHIVE="http://us.ports.ubuntu.com/ubuntu-ports"
if [ "${ARCH}" = "amd64" ] || [ "${ARCH}" = "i386" ]; then
    ARCHIVE="http://us.archive.ubuntu.com/ubuntu"
fi

# Workaround apparmor issues on older distributions.
umount -l /sys/devices/system/cpu || true

# Setup clean sources
echo force-unsafe-io >> /etc/dpkg/dpkg.cfg
cat > /etc/apt/apt.conf.d/60lxc-ci << EOL
APT::Get::Show-Versions "true";
Acquire::Languages "none";
EOL
cat > /etc/apt/sources.list << EOL
deb \${ARCHIVE} \${DISTRO} main universe
deb \${ARCHIVE} \${DISTRO}-updates main universe
deb \${ARCHIVE} \${DISTRO}-security main universe
EOL
apt-get update --yes

# Install dependencies
apt-get install --yes --no-install-recommends \
    btrfs-progs \
    build-essential \
    ca-certificates \
    debootstrap \
    dirmngr \
    dosfstools \
    gcc \
    gdisk \
    git \
    gpg \
    gpg-agent \
    kpartx \
    libc6-dev \
    libncurses-dev \
    mawk \
    patch \
    python3 \
    qemu-utils \
    rsync \
    snapd \
    squashfs-tools \
    unzip \
    xz-utils \
    zstd
apt-get clean
export PATH=/snap/bin:\${PATH}

# Install distrobuilder
snap install snapd --cohort=+ || true
snap install snapd --cohort=+ || true
snap install distrobuilder --classic --edge
snap refresh

# Detect broken snapd
if [ ! -d /var/lib/snapd/apparmor/profiles ]; then
    echo "Broken snapd (no apparmor profiles)"
    exit 1
fi

# All done
exit 0
EOF
) | lxc exec build-distrobuilder-cache -- sh

lxc stop build-distrobuilder-cache
lxc export build-distrobuilder-cache "${TARGET}/build-distrobuilder-cache.tar.xz" --optimized-storage
lxc delete -f build-distrobuilder-cache
