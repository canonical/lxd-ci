#!/bin/sh -eu
set -x

# Check if openstack is usable
if [ -z "${VAULT_ADDR:-}" ]; then
    echo "==> Vault is not accessible, try running \"pe\" first" >&2
    exit 1
fi

if [ "${1:-}" = "" ] || [ "${2:-}" = "" ] || [ "${3:-}" = "" ]; then
    echo "Usage: $0 <serie> <kernel> <script> [args...]" >&2
    exit 1
fi

serie="${1}"
kernel="${2}"
script="${3}"
lxd_snap_channel="${4}"
shift 4
_script="$(mktemp)"
test_name="$(basename "${script}")"

KEY_NAME="ssh-key"
FLAVOR="$(openstack flavor list -f value -c Name | grep -m1 'cpu8-ram32-disk20\b')"
NETWORK="$(openstack network list -f value -c Name | grep -Fm1 "net_stg-lxd-cloud-testing")"
IMAGE="$(openstack image list -f value -c Name --sort-column Name --sort-descending | grep -m1 "auto-sync/ubuntu-${serie}-.*-amd64-")"
NAME="lxd-ci-${test_name}-${serie}-$(echo "${lxd_snap_channel}" | sed 's/[./]/-/g')"

if ! [ -e ~/.ssh/id_ed25519 ]; then
    [ -d ~/.ssh ] || mkdir -m 0700 ~/.ssh
    ssh-keygen -t ed25519 -C "" -f ~/.ssh/id_ed25519 -N ""
    openstack keypair create --public-key ~/.ssh/id_ed25519.pub ssh-key
fi


wait_machine() {
    echo "==> Waiting for SSH to respond" >&2
    for _ in $(seq 30); do
        nc -w1 -z "${IP}" 22 && break
        sleep 1
    done

    # Work around regression in cloud-init delaying SSH access
    # https://bugs.launchpad.net/ubuntu/+source/cloud-init/+bug/2039441
    for _ in $(seq 30); do
        ssh -o ConnectTimeout=1 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "ubuntu@${IP}" true && break
        sleep 1
    done
}

create() {
    # Create a machine
    echo "==> Creating a machine" >&2
    openstack server create --key-name "${KEY_NAME}" --flavor "${FLAVOR}" --network "${NETWORK}" --image "${IMAGE}" --user-data ./cloud-init.user-data.yaml --wait "${NAME}"
    IP="$(openstack server show -f value -c addresses "${NAME}" | cut -d\' -f4)"
    [ "${IP}" != "{}" ]
    echo "${NAME}: ${IP}" >&2
}

RET=1
cleanup() {
    # Release the machine
    set +e
    openstack server delete "${NAME}"
    rm -f "${_script}"

    if [ "${RET}" = "0" ]; then
        echo "" >&2
        echo "==> Test passed (${test_name})" >&2
        exit 0
    fi

    echo "" >&2
    echo "==> Test failed (${test_name})" >&2
    exit ${RET}
}
trap cleanup EXIT HUP INT TERM

# Create a machine
create

# Wait for SSH
wait_machine

# Wait for cloud-init
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "ubuntu@${IP}" cloud-init status --wait --long || true

# Setup custom kernel
if [ "${kernel}" != "default" ]; then
    echo "==> Installing custom kernel: ${kernel}" >&2
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "ubuntu@${IP}" sudo sh /dev/stdin "${kernel}" < "bin/custom-kernel" || true
    sleep 5
    wait_machine
fi

# Connect and run something
echo "==> Running the job ${test_name} against ${lxd_snap_channel}" >&2
sed -e "1 a LXD_SNAP_CHANNEL=${lxd_snap_channel}" -e "1 r bin/helpers" "${script}" > "${_script}"
if echo "${IP}" | grep -q ":"; then
    scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "${_script}" "ubuntu@[${IP}]:test-script"
else
    scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "${_script}" "ubuntu@${IP}:test-script"
fi
ssh -n -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "ubuntu@${IP}" sudo "https_proxy=http://squid.internal:3128" sh test-script "$@"

# Success
RET=0
