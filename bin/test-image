#!/bin/bash
set -eu

# Source helper functions.
. "$(realpath "$(dirname "$0")/helpers")"

# Check input arguments.
if [ "${1:-}" = "" ] || [ "${2:-}" = "" ] || [ "${3:-}" = "" ] || [ "${4:-}" = "" ] || [ "${5:-}" = "" ]; then
    echo "Usage: ${0} <type> <distribution> <release> <variant> <target dir>"
    exit 1
fi

TYPE=${1}
DISTRO=${2}
RELEASE=${3}
VARIANT=${4}
TARGET=${5}

# Ensure lxc is installed.
if ! command -v lxc >/dev/null; then
        echo "==> FAIL: Binary 'lxc' not found!"
        exit 1
fi

# Skip VM tests on arm64.
if [ "${TYPE}" = "vm" ] && [ "$(uname -m)" = "aarch64" ]; then
    echo "==> SKIP: Can't test VM image on arm64 (lack nested support)"
    exit
fi

# Setup the test environment.
TEST_DIR="${HOME}/build-test"
TEST_IMAGE="${TYPE}-${DISTRO}-${VARIANT}"

rm -Rf "${TEST_DIR}"
mkdir -p "${TEST_DIR}"

echo "==> Fetching the image"
if [ "${TYPE}" = "container" ]; then
    TEST_IMAGE_META="${TARGET}/lxd.tar.xz"
    TEST_IMAGE_ROOT="${TARGET}/rootfs.squashfs"
elif [ "${TYPE}" = "vm" ]; then
    TEST_IMAGE_META="${TARGET}/lxd.tar.xz"
    TEST_IMAGE_ROOT="${TARGET}/disk.qcow2"
else
    echo "==> FAIL: Invalid instance type '${TYPE}'. Valid types: [container, vm]"
    exit 1
fi

# has_cloud_init: returns 0 if yes, 1 otherwise
has_cloud_init() {
    if [ "${VARIANT}" = "cloud" ] || [ "${VARIANT}" = "desktop" ]; then
        return 0
    fi
    return 1
}

cleanup() {
    rm -Rf "${TEST_DIR}"
    lxc delete -f "${TEST_IMAGE}" 2>/dev/null || true
    lxc delete -f "${TEST_IMAGE}-priv" 2>/dev/null || true
    lxc delete -f "${TEST_IMAGE}-unpriv" 2>/dev/null || true
    lxc image delete "${TEST_IMAGE}" 2>/dev/null || true

    if [ "${FAIL}" = "1" ]; then
        exit 1
    fi

    exit 0
}

FAIL=1
trap cleanup EXIT HUP INT TERM

lxc image import "${TEST_IMAGE_META}" "${TEST_IMAGE_ROOT}" --alias "${TEST_IMAGE}"

echo "==> Creating the instances"
INSTANCES=""
if [ "${TYPE}" = "vm" ]; then
    TEST_INSTANCE="${TEST_IMAGE}"
    lxc init "${TEST_IMAGE}" "${TEST_IMAGE}" \
        --vm \
        -c limits.cpu=4 \
        -c limits.memory=4GiB
    INSTANCES="${TEST_INSTANCE}"

    # Some distros don't support secure boot.
    case "${DISTRO}" in
        alpine|archlinux|gentoo|nixos|openeuler)
            lxc config set "${TEST_INSTANCE}" security.secureboot=false
            ;;
    esac
else
    for PRIV in "priv" "unpriv"; do
        TEST_INSTANCE="${TEST_IMAGE}-${PRIV}"
        lxc init "${TEST_IMAGE}" "${TEST_INSTANCE}"
        INSTANCES="${INSTANCES} ${TEST_INSTANCE}"

        # FIXME: workaround for Linux 6.6.3 apparmor regression.
        lxc config set "${TEST_INSTANCE}" raw.seccomp "
2
denylist
reject_force_umount
[all]
fsconfig errno 38
fsopen errno 38
"

        if [ "${PRIV}" = "priv" ]; then
            lxc config set "${TEST_INSTANCE}" security.privileged=true
        fi

        # Workaround weird init systems.
        case "${DISTRO}" in
            slackware)
                lxc config set "${TEST_INSTANCE}" raw.lxc lxc.signal.halt=SIGKILL
                ;;
            voidlinux)
                lxc config set "${TEST_INSTANCE}" raw.lxc lxc.signal.halt=SIGCONT
                ;;
        esac
    done
fi

# Cloud-init testing.
if has_cloud_init; then
    for i in ${INSTANCES}; do
        lxc config set "${i}" cloud-init.user-data '
#cloud-config
write_files:
  - content: "foo\n"
    path: /user-data
'

        lxc config set "${i}" cloud-init.vendor-data '
#cloud-config
bootcmd:
  - echo bar > /vendor-data
'
    done
fi

# Start all instances.
echo "==> Starting the instances"
for i in ${INSTANCES}; do
    lxc start "${i}"
done

# Wait for things to settle.
echo "==> Waiting for instances to start"
for i in ${INSTANCES}; do
    if [ "${DISTRO}" == "busybox" ]; then
        # Busybox has only 1 process running when ready.
        MIN_PROC_COUNT=1
    fi

    if [ "${DISTRO}" == "centos" ]; then
        # Give CentOS a bit more time to boot.
        MAX_WAIT_SECONDS=180
    fi

    waitInstanceReady "${i}"
done

# Give instances some extra time to boot properly.
sleep 15
lxc list "${TEST_IMAGE}"

# Check that all instances have an IPv4 and IPv6 address.
echo "==> Performing network tests"
FAIL=0
for url in $(lxc query "/1.0/instances" | jq -r .[] | grep "${TEST_IMAGE}"); do
    name=$(echo "${url}" | cut -d/ -f4)

    # Skip busybox as it wouldn't pass any test
    if [ "${DISTRO}" = "busybox" ]; then
        echo "===> SKIP: Busybox is untestable"
        continue
    fi

    # Systemd cleanliness.
    if lxc exec "${name}" -- test -d /run/systemd/system/; then
        # XXX: Debian Forky/Sid unpriv containers have a problem with console-getty.service
        #      this breaks `lxc console` for those images.
        if [ "${DISTRO}" = "debian" ] && [ "${TYPE}" = "container" ] && [ "$(lxc config get "${name}" security.privileged)" = "true" ]; then
            if [ "${RELEASE}" = "sid" ] || [ "${RELEASE}" = "forky" ]; then
                if isSystemdUnitFailed "${name}" console-getty.service; then
                    echo "::warning::Disabling console-getty.service on ${DISTRO} ${RELEASE} (broken)"
                    lxc exec "${name}" -- systemctl mask --now console-getty.service
                    systemdUnitResetFailed "${name}" console-getty.service
                else
                    echo "::notice::Please remove workaround for console-getty.service on ${DISTRO} ${RELEASE}"
                fi
            fi
        fi

        if lxc exec "${name}" -- systemctl --failed 2>&1 | grep -qwF 'failed'; then
            echo "===> FAIL: systemd clean: ${name}"

            # Show the systemd failures.
            echo "===> DEBUG: systemd failed: ${name}"
            lxc exec "${name}" -- systemctl --failed
            FAIL=1
        else
            echo "===> PASS: systemd clean: ${name}"
        fi
    else
        echo "===> SKIP: systemd clean: ${name}"
    fi

    # Get the addresses.
    address=$(lxc query "${url}/state" | jq -r ".network.eth0.addresses | .[] | select(.scope | contains(\"global\")) | .address" 2>/dev/null || true)
    if [ -z "${address}" ]; then
        address=$(lxc query "${url}/state" | jq -r ".network.enp5s0.addresses | .[] | select(.scope | contains(\"global\")) | .address" 2>/dev/null || true)
    fi

    if [ -z "${address}" ]; then
        echo "===> FAIL: No network interface: ${name}"

        # Show the network state.
        echo "===> DEBUG: network state: ${name}"
        lxc info "${name}"
        FAIL=1
        continue
    fi

    # IPv4 address
    if echo "${address}" | grep -qF "."; then
        echo "===> PASS: IPv4 address: ${name}"
    else
        echo "===> FAIL: IPv4 address: ${name}"
        FAIL=1
    fi

    # IPv6 address
    if echo "${address}" | grep -qF ":"; then
        echo "===> PASS: IPv6 address: ${name}"
    else
        echo "===> FAIL: IPv6 address: ${name}"
        FAIL=1
    fi

    # DNS resolution
    DNS=0
    for _ in $(seq 3); do
        if lxc exec "${name}" -- getent hosts canonical.com >/dev/null 2>&1; then
            DNS=1
            break
        fi

        if lxc exec "${name}" -- nslookup canonical.com >/dev/null 2>&1; then
            DNS=1
            break
        fi

        sleep 1
    done
    if [ "${DNS}" = "1" ]; then
        echo "===> PASS: DNS resolution: ${name}"
    else
        echo "===> FAIL: DNS resolution: ${name}"
        FAIL=1
    fi

    # Cloud-init testing
    if has_cloud_init; then
        if [ "$(lxc file pull "${name}/user-data" - 2>/dev/null)" = "foo" ]; then
            echo "===> PASS: cloud-init user-data provisioning: ${name}"
        else
            echo "===> FAIL: cloud-init user-data provisioning: ${name}"
            FAIL=1
        fi

        if [ "$(lxc file pull "${name}/vendor-data" - 2>/dev/null)" = "bar" ]; then
            echo "===> PASS: cloud-init vendor-data provisioning: ${name}"
        else
            echo "===> FAIL: cloud-init vendor-data provisioning: ${name}"
            FAIL=1
        fi
    fi
done

# Check that cloud variants can be rebooted cleanly.
if has_cloud_init; then
    echo "==> Performing post cloud-init reboot test"
    for name in ${INSTANCES}; do
        lxc exec "${name}" -- cloud-init status --wait --long
        [ "$(lxc exec "${name}" -- cloud-init status)" = "status: done" ]

        # If systemd is available, use it to wait for any other job to complete before the restart
        if lxc exec "${name}" -- test -d /run/systemd/system/; then
            lxc exec "${name}" -- systemctl is-system-running --wait || true
        fi

        lxc restart "${name}"
        waitInstanceReady "${name}"

        # Give instance extra few seconds to boot properly.
        sleep 10

        # cloud-init status.
        if lxc exec "${name}" -- cloud-init status --wait --long; then
            echo "===> PASS: cloud-init reboot: ${name}"
        else
            echo "===> FAIL: cloud-init reboot: ${name}"
            FAIL=1
        fi
    done
fi

# Check that all instances can be stopped.
echo "==> Performing shutdown test"
STOPPED=0
for _ in $(seq 10); do
    # shellcheck disable=SC2086
    if lxc stop ${INSTANCES} --timeout=30 >/dev/null 2>&1; then
        STOPPED=1
        break
    else
        COUNT="$(lxc list -f csv -c n,s "${TEST_IMAGE}" | grep -cw 'RUNNING$')"
        if [ "${COUNT}" = "0" ]; then
            STOPPED=1
            break
        fi

        echo "${COUNT} instances still running"
    fi
done

lxc list "${TEST_IMAGE}"

[ "${STOPPED}" = "0" ] && FAIL=1
