#!/bin/bash
set -eu

# Source helper functions.
. $(realpath $(dirname "$0")/helpers)

# Check input arguments.
if [ "${1:-}" = "" ] || [ "${2:-}" = "" ] || [ "${3:-}" = "" ] || [ "${4:-}" = "" ] || [ "${5:-}" = "" ]; then
    echo "Usage: ${0} <type> <distribution> <release> <variant> <target dir>"
    exit 1
fi

TYPE=${1}
DIST=${2}
RELEASE=${3}
VARIANT=${4}
TARGET=${5}

# Ensure lxc is installed.
if ! which lxc >/dev/null; then
        echo "==> FAIL: Binary 'lxc' not found!"
        exit 1
fi

# Skip VM tests on arm64.
if [ "${TYPE}" = "vm" ] && [ "$(uname -m)" = "aarch64" ]; then
    echo "==> SKIP: Can't test VM image on arm64 (lack nested support)"
    exit
fi

# Setup the test environment.
TEST_DIR="${HOME}/build-test"
TEST_IMAGE="${TYPE}-${DIST}-${VARIANT}"

rm -Rf "${TEST_DIR}"
mkdir -p "${TEST_DIR}"

echo "==> Fetching the image"
if [ "${TYPE}" = "container" ]; then
    cp "${TARGET}/lxd.tar.xz" "${TEST_DIR}/meta"
    cp "${TARGET}/rootfs.squashfs" "${TEST_DIR}/root"
elif [ "${TYPE}" = "vm" ]; then
    cp "${TARGET}/lxd.tar.xz" "${TEST_DIR}/meta"
    cp "${TARGET}/disk.qcow2" "${TEST_DIR}/root"
else
    echo "==> FAIL: Invalid instance type '${TYPE}'. Valid types: [container, vm]"
    exit 1
fi

cleanup() {
    rm -Rf "${TEST_DIR}"
    lxc delete -f "${TEST_IMAGE}" 2>/dev/null || true
    lxc delete -f "${TEST_IMAGE}-priv" 2>/dev/null || true
    lxc delete -f "${TEST_IMAGE}-unpriv" 2>/dev/null || true
    lxc image delete "${TEST_IMAGE}" 2>/dev/null || true

    if [ "${FAIL}" = "1" ]; then
        exit 1
    fi

    exit 0
}

FAIL=1
trap cleanup EXIT HUP INT TERM

FINGERPRINT=$(cat "${TEST_DIR}/meta" "${TEST_DIR}/root" | sha256sum | cut -d' ' -f1)
lxc image import "${TEST_DIR}/meta" "${TEST_DIR}/root" --alias "${TEST_IMAGE}"

echo "==> Creating the instances"
INSTANCES=""
if [ "${TYPE}" = "vm" ]; then
    lxc init "${TEST_IMAGE}" "${TEST_IMAGE}" \
        --vm \
        -c limits.memory=4GB \
        -c security.secureboot=false
        # -c limits.cpu=4 \

    INSTANCES="${TEST_IMAGE}"

    # Cloud-init testing.
    if [ "${VARIANT}" = "cloud" ]; then
        lxc config set "${TEST_IMAGE}" user.user-data "$(cat << EOF
#cloud-config
write_files:
  - content: "foo\n"
    path: /user-data
EOF
)"

        lxc config set "${TEST_IMAGE}" user.vendor-data "$(cat << EOF
#cloud-config
bootcmd:
  - "echo bar > /vendor-data"
EOF
)"
    fi
else
    for PRIV in "priv" "unpriv"; do
        if [ "${PRIV}" = "priv" ] && [ "${DIST}" = "nixos" ] && [ "${RELEASE}" = "23.11" ]; then
            # NixOS 23.11 will never support privileged containers, but future versions do.
            continue
        fi

        lxc init "${TEST_IMAGE}" "${TEST_IMAGE}-${PRIV}"
        INSTANCES="${INSTANCES} ${TEST_IMAGE}-${PRIV}"

        # FIXME: workaround for Linux 6.6.3 apparmor regression.
        printf "2\ndenylist\nreject_force_umount\n[all]\nfsconfig errno 38\nfsopen errno 38\n" | lxc config set "${TEST_IMAGE}-${PRIV}" raw.seccomp -

        if [ "${PRIV}" = "priv" ]; then
            lxc config set "${TEST_IMAGE}-${PRIV}" security.privileged=true
        fi

        if [ "${DIST}" = "voidlinux" ]; then
            # Workaround weird init system.
            lxc config set "${TEST_IMAGE}-${PRIV}" raw.lxc lxc.signal.halt=SIGCONT
        fi

        if [ "${DIST}" = "slackware" ]; then
            # Workaround weird init system.
            lxc config set "${TEST_IMAGE}-${PRIV}" raw.lxc lxc.signal.halt=SIGKILL
        fi

        # Cloud-init testing.
        if [ "${VARIANT}" = "cloud" ]; then
            lxc config set "${TEST_IMAGE}-${PRIV}" user.user-data "$(cat << EOF
#cloud-config
write_files:
  - content: "foo\n"
    path: /user-data
EOF
)"

            lxc config set "${TEST_IMAGE}-${PRIV}" user.vendor-data "$(cat << EOF
#cloud-config
bootcmd:
  - "echo bar > /vendor-data"
EOF
)"
        fi
    done
fi

# Start all instances.
echo "==> Starting the instances"
for i in ${INSTANCES}; do
    lxc start "${i}"
done

# Wait for things to settle.
echo "==> Waiting for instances to start"
for i in ${INSTANCES}; do
    if [ "${DIST}" == "busybox" ]; then
        MIN_PROC_COUNT=1
    fi

    WAIT_READY_TIMEOUT=240 waitInstanceReady "${i}"
done

# Give instances some extra time to boot properly.
sleep 15
lxc list "${TEST_IMAGE}"

# Check that all instances have an IPv4 and IPv6 address.
echo "==> Performing network tests"
FAIL=0
for url in $(lxc query "/1.0/instances" | jq -r .[] | grep "${TEST_IMAGE}"); do
    name=$(echo "${url}" | cut -d/ -f4)

    # Skip busybox as it wouldn't pass any test
    if [ "${DIST}" = "busybox" ]; then
        echo "===> SKIP: Busybox is untestable"
        continue
    fi

    # Skip CentOS 7 VMs due to racy agent
    if [ "${TYPE}" = "vm" ] && [ "${DIST}" = "centos" ] && [ "${RELEASE}" = "7" ]; then
        echo "===> SKIP: CentOS 7 has an unstable agent: ${name}"
        continue
    fi

    # Systemd cleanliness.
    if lxc exec "${name}" -- sh -c "type systemctl" >/dev/null 2>&1; then
        if lxc exec "${name}" -- systemctl --failed 2>&1 | grep -q '\sfailed\s'; then
            echo "===> FAIL: systemd clean: ${name}"

            # Show the systemd failures.
            echo "===> DEBUG: systemd failed: ${name}"
            lxc exec "${name}" -- systemctl --failed
            FAIL=1
        else
            echo "===> PASS: systemd clean: ${name}"
        fi
    else
        echo "===> SKIP: systemd clean: ${name}"
    fi

    # Get the addresses.
    address=$(lxc query "${url}/state" | jq -r ".network.eth0.addresses | .[] | select(.scope | contains(\"global\")) | .address" 2>/dev/null || true)
    if [ -z "${address}" ]; then
        address=$(lxc query "${url}/state" | jq -r ".network.enp5s0.addresses | .[] | select(.scope | contains(\"global\")) | .address" 2>/dev/null || true)
    fi

    if [ -z "${address}" ]; then
        echo "===> FAIL: No network interface: ${name}"

        # Show the network state.
        echo "===> DEBUG: network state: ${name}"
        lxc info "${name}"
        FAIL=1
        continue
    fi

    # IPv4 address
    if echo "${address}" | grep "\." -q; then
        echo "===> PASS: IPv4 address: ${name}"
    else
        echo "===> FAIL: IPv4 address: ${name}"
        FAIL=1
    fi

    # IPv6 address
    if echo "${address}" | grep ":" -q; then
        echo "===> PASS: IPv6 address: ${name}"
    else
        echo "===> FAIL: IPv6 address: ${name}"
        FAIL=1
    fi

    # DNS resolution
    DNS=0
    for i in $(seq 3); do
        if lxc exec "${name}" -- getent hosts canonical.com >/dev/null 2>&1; then
            DNS=1
            break
        fi

        if lxc exec "${name}" -- nslookup canonical.com >/dev/null 2>&1; then
            DNS=1
            break
        fi

        sleep 1
    done
    if [ "${DNS}" = "1" ]; then
        echo "===> PASS: DNS resolution: ${name}"
    else
        echo "===> FAIL: DNS resolution: ${name}"
        FAIL=1
    fi

    # Cloud-init testing
    if [ "${VARIANT}" = "cloud" ]; then
        if [ "$(lxc file pull "${name}/user-data" - 2>/dev/null)" = "foo" ]; then
            echo "===> PASS: cloud-init user-data provisioning: ${name}"
        else
            echo "===> FAIL: cloud-init user-data provisioning: ${name}"
            FAIL=1
        fi

        if [ "$(lxc file pull "${name}/vendor-data" - 2>/dev/null)" = "bar" ]; then
            echo "===> PASS: cloud-init vendor-data provisioning: ${name}"
        else
            echo "===> FAIL: cloud-init vendor-data provisioning: ${name}"
            FAIL=1
        fi
    fi
done

# Check that all instances can be stopped.
echo "==> Performing shutdown test"
STOPPED=0
for i in $(seq 10); do
    # shellcheck disable=SC2086
    if lxc stop ${INSTANCES} --timeout=30 >/dev/null 2>&1; then
        STOPPED=1
        break
    else
        COUNT="$(lxc list "${TEST_IMAGE}" | grep -c RUNNING)"
        if [ "${COUNT}" = "0" ]; then
            STOPPED=1
            break
        fi

        echo "${COUNT} instances still running"
    fi
done

lxc list "${TEST_IMAGE}"

[ "${STOPPED}" = "0" ] && FAIL=1
